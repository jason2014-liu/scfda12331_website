<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
    	http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
	">
	<!-- Root Context: defines shared resources visible to all other web components -->

	<context:property-placeholder location="classpath:*.properties" />

	<jee:jndi-lookup id="dataSource" lookup-on-startup="true"
		jndi-name="${jpa.jndi_name}" />

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceXmlLocation" value="classpath:/META-INF/persistence.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- optional -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="${jpa.showsql}" />
				<property name="databasePlatform" value="${jpa.dialect}" />
			</bean>
		</property>
		<property name="packagesToScan" value="com.wondersgroup.website.bo"></property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
		lazy-init="true">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="businessService"
			expression="execution(* com.wondersgroup.website.service.*.*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="businessService" />
	</aop:config>

	<!-- <context:load-time-weaver /> -->

	<!-- post-processors for all standard config annotations -->
	<context:annotation-config />

	<context:component-scan base-package="com.wondersgroup.website">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- quartz -->

	<bean id="mockTask" class="com.lmstudio.comm.quartz.MockTask"></bean>

	<!-- define jobDetail -->
	<bean id="testJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="mockTask" />
		</property>
		<property name="targetMethod">
			<value>testTask</value>
		</property>
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>

	<!-- define trigger -->
	<bean id="testTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="testJobDetail" />
		</property>
		<property name="cronExpression">
			<value>0/10 * * * * ?</value>
		</property>
	</bean>

	<!--define scheduler -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="testTrigger" />
			</list>
		</property>
	</bean>
</beans>
